# AUTOGENERATED FROM 'app/queries/add_message.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class AddMessageResult(NoPydanticValidation):
    id: uuid.UUID


async def add_message(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
    message_role: str,
    message_body: str,
    sources: list[str],
    chat_id: uuid.UUID,
) -> AddMessageResult | None:
    return await executor.query_single(
        """\
        with
            user := (select User filter .name = <str>$username),
        update ChatHistory
        filter .id = <uuid>$chat_id and .<chats[is User] = user
        set {
            messages := assert_distinct(.messages union (
                insert Message {
                    role := <str>$message_role,
                    body := <str>$message_body,
                    sources := array_unpack(<array<str>>$sources)
                }
            ))
        }\
        """,
        username=username,
        message_role=message_role,
        message_body=message_body,
        sources=sources,
        chat_id=chat_id,
    )
