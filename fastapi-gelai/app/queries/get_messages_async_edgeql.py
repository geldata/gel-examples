# AUTOGENERATED FROM 'app/queries/get_messages.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetMessagesResult(NoPydanticValidation):
    id: uuid.UUID
    role: str | None
    body: str | None
    sources: list[str]
    chat: list[GetMessagesResultChatItem]


@dataclasses.dataclass
class GetMessagesResultChatItem(NoPydanticValidation):
    id: uuid.UUID


async def get_messages(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
    chat_id: uuid.UUID,
) -> list[GetMessagesResult]:
    return await executor.query(
        """\
        with
            user := (select User filter .name = <str>$username),
            chat := (
                select ChatHistory filter .<chats[is User] = user and .id = <uuid>$chat_id
            )
        select Message {
            role,
            body,
            sources,
            chat := .<messages[is ChatHistory]
        } filter .chat = chat;\
        """,
        username=username,
        chat_id=chat_id,
    )
