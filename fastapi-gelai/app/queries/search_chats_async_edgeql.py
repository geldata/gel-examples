# AUTOGENERATED FROM 'app/queries/search_chats.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class SearchChatsResult(NoPydanticValidation):
    id: uuid.UUID
    distance: float | None
    messages: list[SearchChatsResultMessagesItem]


@dataclasses.dataclass
class SearchChatsResultMessagesItem(NoPydanticValidation):
    id: uuid.UUID
    role: str | None
    body: str | None
    sources: list[str]


async def search_chats(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
    limit: int,
    embedding: list[float],
) -> list[SearchChatsResult]:
    return await executor.query(
        """\
        # Find chats that contain messages similar to query

        with 
            user := (select User filter .name = <str>$username),
            chats := (select ChatHistory filter .<chats[is User] = user)

        select chats {
            distance := min(
                ext::ai::search(
                    .messages,
                    <array<float32>>$embedding,
                ).distance,
            ),
            messages: {
                role, body, sources
            }
        }

        order by .distance
        limit <int64>$limit;\
        """,
        username=username,
        limit=limit,
        embedding=embedding,
    )
